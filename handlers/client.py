import time

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InputFile

import MessageBox
from Keyboards import KeyBoards, InlineKB
from create_bot import bot, db


class FSM_client(StatesGroup):
    volume_berry = State()
    client_location = State()
    client_phone = State()


async def command_start(message: types.Message):
    userID = message.from_user.id
    name = message.from_user.full_name
    nick_name = message.from_user.username
    if not db.user_exists(userID):
        db.add_client(userID, time.asctime(), name, nick_name)
    await bot.send_message(chat_id=message.from_user.id,
                           text=MessageBox.START_MESSAGE,
                           reply_markup=KeyBoards.kb_main)
    await message.delete()

async def command_help(message: types.Message):
    await message.reply(text=MessageBox.HELP_MESSAGE)
    await message.delete()


async def command_info(message: types.Message):
    await message.reply(text=MessageBox.INFO_MESSAGE,
                        parse_mode='html')
    await message.delete()


async def command_discount(message: types.Message):
    await message.reply(text=MessageBox.DISCOUNT_MESSAGE, parse_mode='html')
    await message.delete()

async def get_menu(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    photo_url3 = InputFile('photos/Strawberry.jpg')
    await bot.send_photo(message.from_user.id, photo=photo_url3)
    await message.answer('–í—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞—à–µ –º–µ–Ω—é.\n'
                         '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é\n'
                         '<b>–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</b> üçì',parse_mode='html')
    await message.delete()

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
async def command_makeorder(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    uname = message.from_user.full_name
    try:
        current_state = await state.get_state()
        if current_state:
            await state.finish()
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∫–ª—É–±–Ω–∏–∫—É, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ üòÄ \n'
                                    f'–í—ã–±–µ—Ä–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –æ–±—ä–µ–º, {uname}?',
                               reply_markup=InlineKB.ikb_Straw)
        await FSM_client.volume_berry.set()
        await message.delete()
    except:
        await bot.send_message(uid, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')


async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(text='–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞—á–∞—Ç. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é\n'
                             '<b>–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</b> üçì',
                             parse_mode='html')
        return
    await message.answer('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    await state.finish()

async def request_extra_volume_berry(message: types.Message, state: FSMContext):
    try:
        if int(message.text) > 9 or int(message.text) == 3 or int(message.text) == 6:
            await state.update_data(volume_berry=message.text)
            await message.answer(text=MessageBox.MORE_ANSWER,
                                 parse_mode='html')
            await FSM_client.client_location.set()
            await message.delete()
        else:
            await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—ä–µ–º –∫–ª—É–±–Ω–∏–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ä–∞–≤–µ–Ω 3, 6, 9–∫–≥ –∏–ª–∏ –±–æ–ª—å—à–µ')
    except:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø—Ü–∏—é –≤—ã—à–µ –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ')


async def request_location(message: types.Message, state: FSMContext):
    try:
        if '—É–ª' in message.text or '–¥.' in message.text or '–∫–≤.' in message.text:
            await state.update_data(client_location=message.text)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n'
                                 '<b>–ü—Ä–∏–º–µ—Ä:</b> 7987*******',
                                 parse_mode='html')
            await FSM_client.client_phone.set()
            await message.delete()
        else:
            await message.answer('–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    except:
        await message.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ')

async def request_phone(message: types.Message, state: FSMContext):
    try:
        if message.text.startswith('7') and len(message.text) == 11:
            user_name = message.from_user.username
            user_full_name = message.from_user.full_name
            await state.update_data(client_phone=message.text)
            result = await state.get_data()
            await message.answer(text=MessageBox.Respond_request_phone)
            await message.delete()
            admins = db.get_admin_id()
            # –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∑–∞–∫–∞–∑–æ–≤
            for admin_n in admins:
                await bot.send_message(admin_n[0], f'<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>:\n'
                                                   f'<b>–í—Ä–µ–º—è</b>: {time.asctime()}\n'
                                                   f'<b>–§–ò–û</b>: {user_full_name}\n'
                                                   f'@{user_name}\n'
                                                   f'<b>–ó–ê–ö–ê–ó</b>:\n{result}',
                                       parse_mode='html')
            # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
            db.record_client_data(result['client_phone'], result['client_location'], message.from_user.id)
            db.record_order(message.from_user.id, result['volume_berry'], time.asctime())
            await state.finish()
        else:
            await message.answer('–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–≤–µ—Ä—å—Ç–µ—Å—å —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    except:
        await message.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ')


def register_handlers_client(dp: Dispatcher):
    #–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.register_message_handler(command_start, commands=['start'])
    dp.register_message_handler(command_help, commands=['help'])
    dp.register_message_handler(command_info, commands=['info'])
    dp.register_message_handler(command_discount, lambda message: message.text.startswith('–°–∫–∏–¥–∫–∏'))
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    dp.register_message_handler(command_makeorder, lambda message: message.text.startswith('–°–¥–µ–ª–∞—Ç—å'), state='*')

    #–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(cancel_handler, lambda message: message.text.startswith('–û—Ç–º–µ–Ω–∞'), state='*')
    dp.register_message_handler(get_menu, lambda message: message.text.startswith('–ú–µ–Ω—é'), state='*')
    dp.register_message_handler(request_extra_volume_berry, state=FSM_client.volume_berry)
    dp.register_message_handler(request_location, state=FSM_client.client_location)
    dp.register_message_handler(request_phone, state=FSM_client.client_phone)
    # dp.register_message_handler(unknown_handler)

